import React from 'react';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ø—Ü–∏—è–º–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * 
 * @component
 * @param {Object} props - –°–≤–æ–π—Å—Ç–≤–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 * @param {string} props.selectedCategory - –ö–ª—é—á –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @param {Object} props.categories - –û–±—ä–µ–∫—Ç —Å–æ –≤—Å–µ–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
 * @param {Array} props.options - –ú–∞—Å—Å–∏–≤ –æ–ø—Ü–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @param {string} props.searchTerm - –°—Ç—Ä–æ–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –æ–ø—Ü–∏—è–º
 * @param {Function} props.setSearchTerm - –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –ø–æ–∏—Å–∫–∞
 * @param {string} props.newOption - –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –¥–ª—è –Ω–æ–≤–æ–π –æ–ø—Ü–∏–∏
 * @param {Function} props.setNewOption - –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –Ω–æ–≤–æ–π –æ–ø—Ü–∏–∏
 * @param {Function} props.onAddOption - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –æ–ø—Ü–∏–∏
 * @param {Function} props.onDeleteOption - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –æ–ø—Ü–∏–∏
 * @param {Array} props.favorites - –ú–∞—Å—Å–∏–≤ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π
 * @param {Function} props.onToggleFavorite - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
 * @param {boolean} props.isSpinning - –§–ª–∞–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
 * @param {string} props.result - –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
 * @param {Function} props.onRandomSelect - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
 */
const Options = ({
  selectedCategory,
  categories,
  options,
  searchTerm,
  setSearchTerm,
  newOption,
  setNewOption,
  onAddOption,
  onDeleteOption,
  favorites,
  onToggleFavorite,
  isSpinning,
  result,
  onRandomSelect
}) => {
  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      onAddOption();
    }
  };

  const filteredOptions = options.filter(option =>
    !searchTerm || option.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <div className="options-section">
      <div className="section-header">
        <h2>{categories[selectedCategory]}</h2>
        <div className="section-actions">
          <div className="search-bar">
            <input
              type="text"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              placeholder="üîç –ü–æ–∏—Å–∫ –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º..."
            />
          </div>
        </div>
      </div>
      
      <div className="add-option">
        <input
          type="text"
          value={newOption}
          onChange={(e) => setNewOption(e.target.value)}
          onKeyPress={handleKeyPress}
          placeholder="‚ú® –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç"
        />
        <button onClick={onAddOption}>–î–æ–±–∞–≤–∏—Ç—å</button>
      </div>

      <div className="options-list">
        {filteredOptions.map((option, index) => (
          <div key={index} className="option-item">
            <span>{option}</span>
            <div className="option-actions">
              <button 
                className={`favorite-btn ${favorites.includes(option) ? 'active' : ''}`}
                onClick={() => onToggleFavorite(option)}
              >
                ‚òÖ
              </button>
              <button 
                className="remove-option"
                onClick={() => onDeleteOption(index, 'option')}
                title="–£–¥–∞–ª–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç"
              >
                √ó
              </button>
            </div>
          </div>
        ))}
      </div>

      <button 
        className={`random-btn ${isSpinning ? 'spinning' : ''}`} 
        onClick={onRandomSelect}
        disabled={isSpinning || filteredOptions.length === 0}
      >
        {isSpinning ? 'üé≤ –í—ã–±–∏—Ä–∞–µ–º...' : 'üé≤ –í—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç'}
      </button>

      {result && (
        <div className={`result ${isSpinning ? 'spinning' : ''}`}>
          <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç:</h3>
          <div className="result-text">{result}</div>
          {!favorites.includes(result) && (
            <button 
              className="add-to-favorites"
              onClick={() => onToggleFavorite(result)}
            >
              ‚≠ê –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
            </button>
          )}
        </div>
      )}
    </div>
  );
};

export default Options; 